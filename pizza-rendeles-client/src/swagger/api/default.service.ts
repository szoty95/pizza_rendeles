/**
 * REST API SPEC FOR MIX WEBAPP
 * REST API SPEC FOR MIX WEBAPP
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { BoxedPizza } from '../model/boxedPizza';
import { Order } from '../model/order';
import { PersonalDetails } from '../model/personalDetails';
import { Sauce } from '../model/sauce';
import { Topping } from '../model/topping';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class DefaultService {

    protected basePath = 'https://localhost';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Add boxed pizza
     * 
     * @param  
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addBoxedPizza(: number, body?: BoxedPizza, observe?: 'body', reportProgress?: boolean): Observable<BoxedPizza>;
    public addBoxedPizza(: number, body?: BoxedPizza, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<BoxedPizza>>;
    public addBoxedPizza(: number, body?: BoxedPizza, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<BoxedPizza>>;
    public addBoxedPizza(: number, body?: BoxedPizza, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if ( === null ||  === undefined) {
            throw new Error('Required parameter  was null or undefined when calling addBoxedPizza.');
        }


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<BoxedPizza>(`${this.basePath}/pizzas/${encodeURIComponent(String(pizzaID))}/boxedpizzas`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Add new order
     * 
     * @param  
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addOrder(: number, body?: Order, observe?: 'body', reportProgress?: boolean): Observable<Order>;
    public addOrder(: number, body?: Order, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Order>>;
    public addOrder(: number, body?: Order, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Order>>;
    public addOrder(: number, body?: Order, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if ( === null ||  === undefined) {
            throw new Error('Required parameter  was null or undefined when calling addOrder.');
        }


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Order>(`${this.basePath}/people/${encodeURIComponent(String(personID))}/orders`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Add new personal details
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addPersonalDetails(body?: PersonalDetails, observe?: 'body', reportProgress?: boolean): Observable<PersonalDetails>;
    public addPersonalDetails(body?: PersonalDetails, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PersonalDetails>>;
    public addPersonalDetails(body?: PersonalDetails, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PersonalDetails>>;
    public addPersonalDetails(body?: PersonalDetails, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<PersonalDetails>(`${this.basePath}/people`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Add new sauce
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addSauces(body?: Sauce, observe?: 'body', reportProgress?: boolean): Observable<Sauce>;
    public addSauces(body?: Sauce, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Sauce>>;
    public addSauces(body?: Sauce, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Sauce>>;
    public addSauces(body?: Sauce, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Sauce>(`${this.basePath}/sauces`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Add new topping
     * 
     * @param  
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addTopping(: number, body?: Topping, observe?: 'body', reportProgress?: boolean): Observable<Topping>;
    public addTopping(: number, body?: Topping, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Topping>>;
    public addTopping(: number, body?: Topping, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Topping>>;
    public addTopping(: number, body?: Topping, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if ( === null ||  === undefined) {
            throw new Error('Required parameter  was null or undefined when calling addTopping.');
        }


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Topping>(`${this.basePath}/pizzas/${encodeURIComponent(String(pizzaID))}/toppings`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete boxed pizza
     * 
     * @param body 
     * @param body2 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteBoxedPizza(body?: number, body2?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteBoxedPizza(body?: number, body2?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteBoxedPizza(body?: number, body2?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteBoxedPizza(body?: number, body2?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.delete<any>(`${this.basePath}/pizzas/${encodeURIComponent(String(pizzaID))}/boxedpizzas`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete order
     * 
     * @param body 
     * @param body2 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteOrders(body?: number, body2?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteOrders(body?: number, body2?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteOrders(body?: number, body2?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteOrders(body?: number, body2?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.delete<any>(`${this.basePath}/people/${encodeURIComponent(String(personID))}/orders`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete personal details
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deletePersonalDetails(body?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deletePersonalDetails(body?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deletePersonalDetails(body?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deletePersonalDetails(body?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.delete<any>(`${this.basePath}/people`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get sauces
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteSauces(body?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteSauces(body?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteSauces(body?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteSauces(body?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.delete<any>(`${this.basePath}/pizzas/${encodeURIComponent(String(pizzaID))}/sauces`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete topping
     * 
     * @param body 
     * @param body2 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteTopping(body?: number, body2?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteTopping(body?: number, body2?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteTopping(body?: number, body2?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteTopping(body?: number, body2?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.delete<any>(`${this.basePath}/pizzas/${encodeURIComponent(String(pizzaID))}/toppings`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get boxed pizzas
     * 
     * @param  
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getBoxedPizzas(: number, observe?: 'body', reportProgress?: boolean): Observable<BoxedPizza>;
    public getBoxedPizzas(: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<BoxedPizza>>;
    public getBoxedPizzas(: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<BoxedPizza>>;
    public getBoxedPizzas(: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if ( === null ||  === undefined) {
            throw new Error('Required parameter  was null or undefined when calling getBoxedPizzas.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<BoxedPizza>(`${this.basePath}/pizzas/${encodeURIComponent(String(pizzaID))}/boxedpizzas`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get orders
     * 
     * @param  
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getOrders(: number, observe?: 'body', reportProgress?: boolean): Observable<Order>;
    public getOrders(: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Order>>;
    public getOrders(: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Order>>;
    public getOrders(: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if ( === null ||  === undefined) {
            throw new Error('Required parameter  was null or undefined when calling getOrders.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Order>(`${this.basePath}/people/${encodeURIComponent(String(personID))}/orders`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get all personal details
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPersonalDetails(observe?: 'body', reportProgress?: boolean): Observable<PersonalDetails>;
    public getPersonalDetails(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PersonalDetails>>;
    public getPersonalDetails(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PersonalDetails>>;
    public getPersonalDetails(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<PersonalDetails>(`${this.basePath}/people`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get sauces
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getSauces(observe?: 'body', reportProgress?: boolean): Observable<Sauce>;
    public getSauces(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Sauce>>;
    public getSauces(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Sauce>>;
    public getSauces(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Sauce>(`${this.basePath}/sauces`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get all toppings
     * 
     * @param  
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getToppings(: number, observe?: 'body', reportProgress?: boolean): Observable<Topping>;
    public getToppings(: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Topping>>;
    public getToppings(: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Topping>>;
    public getToppings(: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if ( === null ||  === undefined) {
            throw new Error('Required parameter  was null or undefined when calling getToppings.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Topping>(`${this.basePath}/pizzas/${encodeURIComponent(String(pizzaID))}/toppings`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update boxed pizza
     * 
     * @param  
     * @param 2 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateBoxedPizza(: number, 2: number, body?: BoxedPizza, observe?: 'body', reportProgress?: boolean): Observable<BoxedPizza>;
    public updateBoxedPizza(: number, 2: number, body?: BoxedPizza, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<BoxedPizza>>;
    public updateBoxedPizza(: number, 2: number, body?: BoxedPizza, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<BoxedPizza>>;
    public updateBoxedPizza(: number, 2: number, body?: BoxedPizza, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if ( === null ||  === undefined) {
            throw new Error('Required parameter  was null or undefined when calling updateBoxedPizza.');
        }

        if (2 === null || 2 === undefined) {
            throw new Error('Required parameter 2 was null or undefined when calling updateBoxedPizza.');
        }


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<BoxedPizza>(`${this.basePath}/pizzas/${encodeURIComponent(String(pizzaID))}/boxedpizzas/${encodeURIComponent(String(boxID))}`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update order
     * 
     * @param  
     * @param 2 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateOrder(: number, 2: number, body?: Order, observe?: 'body', reportProgress?: boolean): Observable<Order>;
    public updateOrder(: number, 2: number, body?: Order, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Order>>;
    public updateOrder(: number, 2: number, body?: Order, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Order>>;
    public updateOrder(: number, 2: number, body?: Order, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if ( === null ||  === undefined) {
            throw new Error('Required parameter  was null or undefined when calling updateOrder.');
        }

        if (2 === null || 2 === undefined) {
            throw new Error('Required parameter 2 was null or undefined when calling updateOrder.');
        }


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<Order>(`${this.basePath}/people/${encodeURIComponent(String(personID))}/orders/${encodeURIComponent(String(orderID))}`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update personal details
     * 
     * @param  
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updatePersonalDetails(: number, body?: PersonalDetails, observe?: 'body', reportProgress?: boolean): Observable<PersonalDetails>;
    public updatePersonalDetails(: number, body?: PersonalDetails, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PersonalDetails>>;
    public updatePersonalDetails(: number, body?: PersonalDetails, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PersonalDetails>>;
    public updatePersonalDetails(: number, body?: PersonalDetails, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if ( === null ||  === undefined) {
            throw new Error('Required parameter  was null or undefined when calling updatePersonalDetails.');
        }


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<PersonalDetails>(`${this.basePath}/people/${encodeURIComponent(String(personID))}`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update sauce
     * 
     * @param  
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateSauces(: number, body?: Sauce, observe?: 'body', reportProgress?: boolean): Observable<Sauce>;
    public updateSauces(: number, body?: Sauce, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Sauce>>;
    public updateSauces(: number, body?: Sauce, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Sauce>>;
    public updateSauces(: number, body?: Sauce, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if ( === null ||  === undefined) {
            throw new Error('Required parameter  was null or undefined when calling updateSauces.');
        }


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<Sauce>(`${this.basePath}/sauces/${encodeURIComponent(String(sauceID))}`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update topping
     * 
     * @param  
     * @param 2 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateTopping(: number, 2: number, body?: Topping, observe?: 'body', reportProgress?: boolean): Observable<Topping>;
    public updateTopping(: number, 2: number, body?: Topping, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Topping>>;
    public updateTopping(: number, 2: number, body?: Topping, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Topping>>;
    public updateTopping(: number, 2: number, body?: Topping, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if ( === null ||  === undefined) {
            throw new Error('Required parameter  was null or undefined when calling updateTopping.');
        }

        if (2 === null || 2 === undefined) {
            throw new Error('Required parameter 2 was null or undefined when calling updateTopping.');
        }


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<Topping>(`${this.basePath}/pizzas/${encodeURIComponent(String(pizzaID))}/toppings/${encodeURIComponent(String(toppingID))}`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
